<!DOCTYPE html>
<html>

<head>

    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="shortcut icon" href="/public/userAssets/images/favicon.png">

    <meta name="author" content="CodePixar">

    <meta name="description" content="">

    <meta name="keywords" content="">

    <meta charset="UTF-8">

    <title>BUILD YOUR DREAM | Buy Modern Furniture Online</title>


    <link rel="stylesheet" href="/public/userAssets/css/linearicons.css">
    <link rel="stylesheet" href="/public/userAssets/css/font-awesome.min.css">
    <link rel="stylesheet" href="/public/userAssets/css/themify-icons.css">
    <link rel="stylesheet" href="/public/userAssets/css/bootstrap.css">
    <link rel="stylesheet" href="/public/userAssets/css/owl.carousel.css">
    <link rel="stylesheet" href="/public/userAssets/css/nice-select.css">
    <link rel="stylesheet" href="/public/userAssets/css/nouislider.min.css">
    <link rel="stylesheet" href="/public/userAssets/css/ion.rangeSlider.css" />
    <link rel="stylesheet" href="/public/userAssets/css/ion.rangeSlider.skinFlat.css" />
    <link rel="stylesheet" href="/public/userAssets/css/magnific-popup.css">
    <link rel="stylesheet" href="/public/userAssets/css/main.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="css/font-awesome.css" rel="stylesheet">
    <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.theme.default.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">


    <link rel="stylesheet" href="/public/userAssets/css/custom.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/public/userAssets/css/profileAsset/orderDetails.css">
</head>

<body>

    <div class="order-details-container">

        <div class="order-header">
            <div>
                <h2>Order id: #<%= order._id.toString().slice(-8) %>
                </h2>

            </div>
            <span class="status-badge status-<%= order.status.toLowerCase() %>">
                <%= order.status %>
            </span>
        </div>

        <div class="tracking-container">
            <div class="tracking-line">
                <div class="tracking-line-progress"></div>
            </div>
            <div class="tracking-steps">
                <div class="tracking-step">
                    <div
                        class="step-icon <%= ['Processing', 'Shipped', 'Delivered'].includes(order.status) ? 'completed' : '' %>">
                        <i class="fas fa-box"></i>
                    </div>
                    <span>Order Placed</span>
                </div>
                <div class="tracking-step">
                    <div class="step-icon <%= ['Shipped', 'Delivered'].includes(order.status) ? 'completed' : 
                        order.status === 'Processing' ? 'current' : '' %>">
                        <i class="fas fa-warehouse"></i>
                    </div>
                    <span>Processing</span>
                </div>
                <div class="tracking-step">
                    <div class="step-icon <%= order.status === 'Delivered' ? 'completed' : 
                        order.status === 'Shipped' ? 'current' : '' %>">
                        <i class="fas fa-truck"></i>
                    </div>
                    <span>Shipped</span>
                </div>
                <div class="tracking-step">
                    <div class="step-icon <%= order.status === 'Delivered' ? 'completed' : '' %>">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <span>Delivered</span>
                </div>
            </div>
        </div>

        <div class="order-items">
            <h3>Order Items</h3>
            <% order.items.forEach(item=> { %>
                <div class="item-card">
                    <img src="<%= item.productId.images[0] %>" alt="<%= item.productId.name %>" class="item-image">
                    <div class="item-details">
                        <h4>
                            <%= item.productId.name %>
                        </h4>
                        <p>Quantity: <%= item.quantity %>
                        </p>
                        <p>Price: ₹<%= item.price.toFixed(2) %>
                        </p>
                    </div>
                </div>
                <% }); %>
        </div>

        <div class="delivery-info">
            <div class="info-grid">

                <div class="info-box">
                    <h4>Payment Information</h4>
                    <p>Method: <%= order.paymentMethod %>
                    </p>
                    <p>Status: <%= order.paymentStatus %>
                    </p>
                </div>
                <span>
                    <div class="info-box">
                        <h4>shipping Address</h4>
                        <% if (selectedAddress) { %>
                            <p>House Name : <%= selectedAddress.houseNumber %>
                            </p>
                            <p>Landmark : <%= selectedAddress.landmark ? selectedAddress.landmark : 'N/A' %>
                            </p>
                            <p>Pincode : <%= selectedAddress.pincode %>
                            </p>
                            <p>City : <%= selectedAddress.city %>
                            </p>
                            <p>Country : <%= selectedAddress.country %>
                            </p>


                            <% } else { %>
                                <p style="color: red;">Address not found</p>
                                <% } %>
                    </div>
                </span>
            </div>
        </div>

        <div class="price-summary">
            <div class="price-row">
                <span>Subtotal</span>
                <span>₹<%= subTotal.toFixed(2) %></span>
            </div>
            <% if (coupon && coupon !==null) { %>
                <div class="price-row">
                    <span>Discount Amount</span>
                    <span>- ₹<%= (discountAmount ? discountAmount.toFixed(2) : "0.00" ) %></span>
                </div>
                <% }else{ %>
                    <div class="price-row">
                        <span>Discount Amount</span>
                        <span>₹0.00</span>
                    </div>
                    <% } %>
                    <div class="price-row total-row">
                        <span>Total</span>
                        <span>₹<%= (order.totalAmount - order.discount).toFixed(2) %></span>
                    </div>
                    <div class="row mt-4 mb-5 d-flex justify-content-center">
                        <div class="col-12 text-center">
                            <% if(order.paymentStatus==='Paid' && order.status==='Delivered' ) {%>
                                <button onclick="downloadInvoice('<%= order._id %>')">Download Invoice</button>
                                <% } %>
                                    <button type="button" class="btn h" onclick="backToOrder()">
                                        <i class="fas fa-arrow-left me-2"></i>Back to Orders
                                    </button>


                        </div>
                        <div style="display: flex; justify-content: center; margin: 20px 0;">
                            <% if (order.status==='Delivered' ) { %>
                                <% if (returnOrder && returnOrder.returnStatus==='Rejected' ) { %>
                                    <button type="button" class="return-trigger-btn btn-danger">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        Your return was rejected
                                    </button>
                                    <% }else if(returnOrder && returnOrder.returnStatus==='Approved' ){ %>
                                        <button type="button" class="return-trigger-btn btn-success"
                                            style="background: #48c779;">
                                            <i class="fas fa-check-circle"></i>
                                            return order Approved
                                        </button>
                                        <% } else { %>
                                            <button type="button" class="return-trigger-btn"
                                                onclick="openReturnModal()">
                                                <i class="fas fa-undo-alt"></i>
                                                Return Order
                                            </button>
                                            <% } %>
                                                <% } %>
                        </div>
                    </div>
        </div>
    </div>

    
    <div id="returnModal" class="return-modal">
        <div class="return-modal-content">
            <div class="return-modal-header">
                <i class="fas fa-box-open"></i>
                <h4>Request Return</h4>
                <button class="close-modal" onclick="closeReturnModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="return-modal-body">
                <form id="returnForm" onsubmit="submitReturn(event)">
                    <input type="hidden" name="orderId" value="<%= order._id %>">

                    <div class="form-group">
                        <label>Select Return Reason</label>
                        <div class="reason-options">
                            <label class="reason-option">
                                <input type="radio" name="returnReason" value="wrong_item" required>
                                <span class="reason-content">
                                    <i class="fas fa-exchange-alt"></i>
                                    <div>
                                        <h6>Wrong Item</h6>
                                        <p>Received different item than ordered</p>
                                    </div>
                                </span>
                            </label>

                            <label class="reason-option">
                                <input type="radio" name="returnReason" value="damaged">
                                <span class="reason-content">
                                    <i class="fas fa-bomb"></i>
                                    <div>
                                        <h6>Damaged/Defective</h6>
                                        <p>Item arrived damaged or not working</p>
                                    </div>
                                </span>
                            </label>



                            <label class="reason-option">
                                <input type="radio" name="returnReason" value="quality">
                                <span class="reason-content">
                                    <i class="fas fa-star-half-alt"></i>
                                    <div>
                                        <h6>Quality Issue</h6>
                                        <p>Quality not as expected</p>
                                    </div>
                                </span>
                            </label>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Additional Details</label>
                        <textarea name="description"
                            placeholder="Please provide more details about your return request..." required></textarea>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" onclick="closeReturnModal()">
                            Cancel
                        </button>
                        <button type="submit" class="btn-primary">
                            Submit Return Request
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>



        document.addEventListener('DOMContentLoaded', function () {

            const currentStatus = '<%= order.status %>';


            const statusOrder = ['Pending', 'Processing', 'Shipped', 'Delivered'];
            const currentStatusIndex = statusOrder.indexOf(currentStatus);


            const progress = (currentStatusIndex + 1) * (100 / statusOrder.length);


            setTimeout(() => {
                const progressLine = document.querySelector('.tracking-line-progress');
                progressLine.style.width = `${progress}%`;
            }, 500);


            const steps = document.querySelectorAll('.tracking-step');
            steps.forEach((step, index) => {
                const stepIcon = step.querySelector('.step-icon');
                const stepLabel = step.querySelector('span');

                setTimeout(() => {
                    if (index <= currentStatusIndex) {
                        stepIcon.classList.add('completed');
                        stepLabel.classList.add('completed');


                        if (index === currentStatusIndex) {
                            stepIcon.classList.add('current');
                        }
                    }
                }, index * 600);
            });


            window.updateOrderStatus = function (newStatus) {
                const statusBadge = document.querySelector('.status-badge');
                statusBadge.className = `status-badge status-${newStatus.toLowerCase()} status-update`;
                statusBadge.textContent = newStatus;


                const newStatusIndex = statusOrder.indexOf(newStatus);
                const newProgress = (newStatusIndex + 1) * (100 / statusOrder.length);

                const progressLine = document.querySelector('.tracking-line-progress');
                progressLine.style.width = `${newProgress}%`;


                steps.forEach((step, index) => {
                    const stepIcon = step.querySelector('.step-icon');
                    const stepLabel = step.querySelector('span');

                    if (index <= newStatusIndex) {
                        stepIcon.classList.add('completed');
                        stepLabel.classList.add('completed');
                    } else {
                        stepIcon.classList.remove('completed');
                        stepLabel.classList.remove('completed');
                    }


                    if (index === newStatusIndex) {
                        stepIcon.classList.add('current');
                    } else {
                        stepIcon.classList.remove('current');
                    }
                });
            };
        });


        function simulateStatusUpdate() {
            const statusOrder = ['Pending', 'Processing', 'Shipped', 'Delivered'];
            let currentIndex = statusOrder.indexOf('<%= order.status %>');

            const interval = setInterval(() => {
                currentIndex++;
                if (currentIndex >= statusOrder.length) {
                    clearInterval(interval);
                    return;
                }
                updateOrderStatus(statusOrder[currentIndex]);
            }, 3000);
        }


        function backToOrder() {
            window.location.href = ('/user/myProfile')
        }

        function openReturnModal() {
            document.getElementById('returnModal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closeReturnModal() {
            document.getElementById('returnModal').style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        function submitReturn(event) {
            event.preventDefault();

            const form = event.target;
            const formData = new FormData(form);
            const orderId = '<%= order._id %>';

            const returnData = {
                orderId: orderId,
                returnReason: formData.get('returnReason'),
                description: formData.get('description')
            };


            

            Swal.fire({
                title: "Are you sure?",
                text: "Do you want to request a return?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, request it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/user/request-return', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(returnData)
                    })
                        .then(response => response.json())
                        .then(data => {
                            
                            if (data.success) {
                                Swal.fire(
                                    "Success!",
                                    "Return request submitted successfully!",
                                    "success"
                                ).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                Swal.fire(
                                    "Error!",
                                    "Failed to submit return request: " + data.message,
                                    "error"
                                );
                            }
                        })
                        .catch(error => {
                            Swal.fire("Error!", "Something went wrong!", "error");
                        });
                }
            });

        }

        window.onclick = function (event) {
            if (event.target == document.getElementById('returnModal')) {
                closeReturnModal();
            }
        }


        function downloadInvoice(orderId) {

            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to download the invoice?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, download!',
                cancelButtonText: 'Cancel',
            }).then((result) => {
                if (result.isConfirmed) {

                    Swal.fire({
                        title: 'Generating Invoice',
                        text: 'Please wait...',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });


                    fetch(`/user/orderInvoice/${orderId}`, {
                        method: 'GET',
                        headers: { 'Accept': 'application/pdf' }
                    })
                        .then(response => {
                            if (!response.ok) {
                                return response.text().then(err => { throw new Error(err); });
                            }
                            return response.blob();
                        })
                        .then(blob => {

                            

                            Swal.close();


                            const url = window.URL.createObjectURL(blob);
                            const link = document.createElement("a");
                            link.href = url;
                            link.download = `invoice-${orderId}.pdf`;
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);


                            setTimeout(() => window.URL.revokeObjectURL(url), 200);


                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Invoice downloaded successfully',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        })

                        .catch(error => {
                            console.error("Error:", error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: error.message || 'Failed to generate invoice!'
                            });
                        });
                }
            });
        }

    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>

</html>