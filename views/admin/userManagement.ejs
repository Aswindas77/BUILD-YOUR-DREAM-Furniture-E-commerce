<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management</title>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .access-btn {
            min-width: 80px;
            position: relative;
        }
        .access-btn:disabled {
            opacity: 0.7;
        }
        .table-dark {
            background-color: #343a40;
        }
        .table td {
            vertical-align: middle;
        }
    </style>
</head>
<body>
    <div class="container my-4">
        <h3 class="my-4">User Management</h3>
        <table class="table table-striped table-bordered">
          <thead class="table-dark">
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Registration Details</th>
              <th>Access</th>
            </tr>
          </thead>
          <tbody>
            <% for (let i = 0; i < users.length; i++) { %>
              <tr>
                <td><%= users[i].username %></td>
                <td><%= users[i].email %></td> 
                <td><%= new Date(users[i].createdAt).toDateString() %></td>
                <td>
                  <button
                    class="btn <%= users[i].isBlocked ? 'btn-danger' : 'btn-success' %> btn-sm access-btn"
                    data-id="<%= users[i]._id %>"
                    data-status="<%= users[i].isBlocked ? 'blocked' : 'active' %>"
                  >
                    <span class="button-text">
                      <%= users[i].isBlocked ? 'Unblock' : 'Block' %>
                    </span>
                    <span class="spinner-border spinner-border-sm d-none" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </span>
                  </button>
                </td>
              </tr>
            <% } %>
          </tbody>
        </table>
      
        
        <nav aria-label="User Management Pagination">
          <ul class="pagination">
            <% if (currentPage > 1) { %>
              <li class="page-item">
                <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
              </li>
            <% } %>
            <% for (let i = 1; i <= totalPages; i++) { %>
              <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                <a class="page-link" href="?page=<%= i %>"><%= i %></a>
              </li>
            <% } %>
            <% if (currentPage < totalPages) { %>
              <li class="page-item">
                <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
              </li>
            <% } %>
          </ul>
        </nav>
      </div>
      
 
      <script>
        document.addEventListener('DOMContentLoaded', function () {
            const accessButtons = document.querySelectorAll('.access-btn');
    
            accessButtons.forEach(button => {
                button.addEventListener('click', async function () {
                    try {
                        const userId = this.dataset.id;
                        const currentStatus = this.dataset.status;
                        const action = currentStatus === 'active' ? 'block' : 'unblock';
                        const buttonText = this.querySelector('.button-text');
                        const spinner = this.querySelector('.spinner-border');
    
                        
                        this.disabled = true;
                        buttonText.classList.add('d-none');
                        spinner.classList.remove('d-none');
    
                        
                        const response = await fetch(`admin/toggle/${userId}/${action}`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            }
                        });
    
                        
                        const contentType = response.headers.get('Content-Type');
                        if (!contentType.includes('application/json')) {
                            throw new Error('Unexpected response from the server. Please try again.');
                        }
    
                        
                        const data = await response.json();
    
                        if (response.ok) {
                           
                            const newStatus = currentStatus === 'active' ? 'blocked' : 'active';
                            this.dataset.status = newStatus;
    
                            
                            if (newStatus === 'blocked') {
                                this.classList.remove('btn-success');
                                this.classList.add('btn-danger');
                                buttonText.textContent = 'Unblock';
                            } else {
                                this.classList.remove('btn-danger');
                                this.classList.add('btn-success');
                                buttonText.textContent = 'Block';
                            }
    
                            
                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            throw new Error(data.message);
                        } 
                    } catch (error) {
                        console.error('Error:', error);
    
                       
                        Swal.fire({
                            title: 'Error!',
                            text: error.message || 'Failed to update user status.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    } finally {
                       
                        this.disabled = false;
                        buttonText.classList.remove('d-none');
                        spinner.classList.add('d-none');
                    }
                });
            });
        });
    </script>
    
</body>
</html>
 