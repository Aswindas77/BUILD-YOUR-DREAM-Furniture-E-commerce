<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <link rel="stylesheet" href="/public/adminAssets/css/editProduct.css">
</head>

<body>
    <div class="container">
        <div class="form-container">
            <h1>edit Product</h1>
            <form method="post" action="updateProduct" onsubmit="productAdder(event)" id="add-product-form">
                <input hidden type="text" id="product-name" name="id" value="<%= product._id %>">

                <!-- Product Name -->
                <div class="mb-3">
                    <label for="name" class="form-label">Product Name</label>
                    <input type="text" class="form-control" id="name" name="name" value="<%= product.name%>" required>
                </div>

                <!-- Description -->
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <textarea class="form-control" id="description" name="description" rows="4"
                        required><%= product.description%></textarea>
                </div>

                <!-- Category -->
                <div class="mb-3">
                    <label for="category" class="form-label">Category</label>
                    <select class="form-select" id="category" name="category">
                        <% categories.forEach(category=> { %>
                            <option value="<%= category._id %>">
                                <%= category.name %>
                            </option>
                            <% }); %>
                    </select>

                </div>

                <!-- Sales Price -->
                <div class="mb-3">
                    <label for="salesPrice" class="form-label">Sales Price</label>
                    <input type="number" class="form-control" id="salesPrice" name="salesPrice"
                        value="<%= product.salesPrice%>" step="0.01" required>
                </div>

                <!-- Product Offer -->
                <div class="mb-3">
                    <label for="productOffer" class="form-label">Product Offer (%)</label>
                    <input type="number" class="form-control" id="productOffer" name="productOffer"
                        value="<%= product.productOffer %>" step="1" min="0">
                </div>

                <!-- Stock -->
                <div class="mb-3">
                    <label for="stock" class="form-label">Stock</label>
                    <input type="number" class="form-control" id="stock" name="stock" value="<%= product.stock%>"
                        required>
                </div>

                <!-- Status -->
                <div class="mb-3">
                    <label for="status" class="form-label">Status</label>
                    <select class="form-select" id="status" name="status" required>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>

                <!-- Image Upload -->
                <div class="mb-3 d-flex flex-column align-items-center">
                    <label for="image1" class="text-center mb-2">Image 1</label>
                    <input onchange="cropper(1)" id="image1" type="file" accept="image/*"
                        class="form-control form-control-sm w-50 mb-2 text-center">
                    <div class="cropper-container text-center">

                        <img style="object-fit: cover;" src="<%= product.images[0] %>" alt="Image 1 Preview" id="prev1"
                            class="mb-3 img-fluid">

                    </div>
                    <label for="image2" class="text-center mb-2">Image 2</label>
                    <input onchange="cropper(2)" id="image2" type="file" accept="image/*"
                        class="form-control form-control-sm w-50 mb-2 text-center">
                    <div class="cropper-container text-center">
                        <img style="object-fit: cover;" src="<%= product.images[1] %>" alt="Image 2 Preview" id="prev2"
                            class="mb-3 img-fluid">

                    </div>

                    <label for="image3" class="text-center mb-2">Image 3</label>
                    <input onchange="cropper(3)" id="image3" type="file" accept="image/*"
                        class="form-control form-control-sm w-50 mb-2 text-center">
                    <div class="cropper-container text-center">

                        <img style="object-fit: cover;" src="<%= product.images[2] %>" alt="Image 3 Preview" id="prev3"
                            class="mb-3 img-fluid">
                    </div>
                </div>

                <!-- Submit Button -->
                <button type="submit" id="btn-submit" class="btn btn-primary w-100">update</button>
            </form>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>

        document.getElementById("add-product-form").addEventListener("submit", function (event) {
            let isValid = true;

            // Get input values
            const name = document.getElementById("name");
            const description = document.getElementById("description");
            const category = document.getElementById("category");
            const salesPrice = document.getElementById("salesPrice");
            const productOffer = document.getElementById("productOffer");
            const stock = document.getElementById("stock");
            const status = document.getElementById("status");

            // Remove old error messages
            document.querySelectorAll(".error-message").forEach(e => e.remove());

            // Function to show error messages
            function showError(input, message) {
                input.classList.add("border", "border-danger"); // Add red border
                const errorDiv = document.createElement("div");
                errorDiv.className = "error-message text-danger mt-1";
                errorDiv.innerText = message;
                input.parentNode.appendChild(errorDiv);
                isValid = false;
            }

            function clearError(input) {
                input.classList.remove("border", "border-danger");
            }

            // Validate Product Name
            if (name.value.trim().length < 3) {
                showError(name, " Product name must be at least 3 characters.");
            } else {
                clearError(name);
            }

            // Validate Description
            if (description.value.trim().length < 10) {
                showError(description, " Description must be at least 10 characters.");
            } else {
                clearError(description);
            }

            // Validate Category
            if (!category.value) {
                showError(category, " Please select a category.");
            } else {
                clearError(category);
            }

            // Validate Sales Price
            if (isNaN(salesPrice.value) || salesPrice.value <= 0) {
                showError(salesPrice, " Sales price must be greater than 0.");
            } else {
                clearError(salesPrice);
            }

            // Validate Product Offer (0-100%)
            if (isNaN(productOffer.value) || productOffer.value < 0 || productOffer.value > 100) {
                showError(productOffer, " Product offer must be between 0% and 100%.");
            } else {
                clearError(productOffer);
            }

            // Validate Stock (Must be 0 or greater)
            if (isNaN(stock.value) || stock.value < 0) {
                showError(stock, " Stock cannot be negative.");
            } else {
                clearError(stock);
            }

            // Validate Status
            if (!["active", "inactive"].includes(status.value)) {
                showError(status, " Please select a valid status.");
            } else {
                clearError(status);
            }

            // Validate Images
            for (let i = 1; i <= 3; i++) {
                const imageInput = document.getElementById(`image${i}`);
                if (imageInput.files.length > 0) {
                    const file = imageInput.files[0];
                    const allowedTypes = ["image/jpeg", "image/png", "image/jpg"];
                    if (!allowedTypes.includes(file.type)) {
                        showError(imageInput, " Only JPG, JPEG, or PNG images allowed.");
                    }
                    if (file.size > 2 * 1024 * 1024) { // 2MB limit
                        showError(imageInput, " Image must be less than 2MB.");
                    }
                }
            }

            // Prevent form submission if invalid
            if (!isValid) {
                event.preventDefault();
            }

        });

        //  this is cropper image function

        let croppers = {}
        function cropper(index) {
            const files = document.getElementById(`image${index}`)
            const preview = document.getElementById(`prev${index}`)
            const file = files.files[0]
            if (file) {
                const objectURL = URL.createObjectURL(file)
                preview.src = objectURL
                preview.style.display = 'block'
                if (croppers[index]) {
                    croppers[index].destroy()
                }
                croppers[index] = new Cropper(preview, {
                    aspectRatio: NaN,
                    cropBoxMovable: true,
                    ready: function () {
                        this.cropper.setCropBoxData({
                            width: 100,
                            height: 100,
                        })
                    },
                })
            }
        }

        function productAdder(e) {
            console.log(e)

            e.preventDefault()
            let images = []
            for (let i = 1; i < 4; i++) {
                const canvas = croppers[i]?.getCroppedCanvas()
                const base64Image = canvas?.toDataURL('image/png')
                images.push(base64Image)
            }
            const formdata = new FormData(e.target)

            images.forEach((image, index) => {
                formdata.append(`image${index}`, image)
            })

            const formObject = {}
            formdata.forEach((value, key) => {
                formObject[key] = value
            })
            console.log(formObject);

            fetch('/admin/updateProduct', {
                method: 'post',
                body: JSON.stringify(formObject),
                headers: { 'Content-Type': 'application/json' },
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {  
                        console.log("Update successful");
                        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'Product updated successfully',
            confirmButtonText: 'OK'
        }).then(() => {
            window.location.href = "/admin/productManagement";
        });

                    } else {
                        showToast(data.message || "Failed to update product");
                    }
                })
                .catch(error => {
                    console.error('Error during fetch:', error);
                    showToast("An error occurred. Please try again.");
                });
        }


        function showToast(message, type) { 
            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: "center",
                close: true,
                style: {
                    background: "orange",
                    color: "white",
                    fontWeight: "bold",
                    borderRadius: "8px",
                },
            }).showToast();
        }


    </script>
</body>

</html>