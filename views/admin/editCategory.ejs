<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update Category</title>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.10.5/sweetalert2.all.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.10.5/sweetalert2.min.css">
    <link rel="stylesheet" href="/public/adminAssets/css/editCat.css">
    <style>
        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }

        .form-group {
            margin-bottom: 1.5rem;
            position: relative;
        }

        .error .error-message {
            display: block;
        }

        .error input,
        .error textarea {
            border-color: #dc3545;
        }

        .form-group {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 1rem;
            background: transparent;
        }

        .form-group label {
            position: absolute;
            left: 0.75rem;
            top: 0.75rem;
            padding: 0 0.25rem;
            background-color: white;
            color: #666;
            font-size: 1rem;
            transition: 0.2s ease all;
            pointer-events: none;
        }

        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, .25);
        }

        .form-group input:focus~label,
        .form-group textarea:focus~label,
        .form-group input:not(:placeholder-shown)~label,
        .form-group textarea:not(:placeholder-shown)~label {
            top: -0.5rem;
            font-size: 0.875rem;
            color: #007bff;
        }

        .form-group input::placeholder,
        .form-group textarea::placeholder {
            color: transparent;
        }

        .form-control {
            height: auto;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>Edit Category</h1>
        <form method="post" action="updatecategory" onsubmit="return handleSubmit(event)" id="add-category-form">
            <input hidden type="text" name="id" value="<%= category._id%>">

            <div class="form-group">
                <input type="text" id="category-name" name="name" value="<%= category.name %>" placeholder=" ">
                <label for="category-name">Category Name</label>
                <span class="error-message" id="category-name-error"></span>
            </div>

            <div class="form-group">
                <textarea id="category-description" name="description"
                    placeholder=" "><%= category.description %></textarea>
                <label for="category-description">Category Description</label>
                <span class="error-message" id="category-description-error"></span>
            </div>

            <div class="form-group">
                <input type="number" class="form-control" id="categoryOffer" name="categoryOffer"
                    value="<%= category.offerPercentage %>" step="1" placeholder=" ">
                <label for="categoryOffer">Offer Percentage</label>
                <span class="error-message" id="categoryOffer-error"></span>
            </div>

            <div class="form-group">
                <input type="number" class="form-control" id="minPrice" name="minimumPrice"
                    value="<%= category.minimumPrice %>" step="1" placeholder=" ">
                <label for="minPrice">Minimum Price</label>
                <span class="error-message" id="minPrice-error"></span>
            </div>

            <div class="form-group">
                <input type="number" class="form-control" id="claimableAmount" name="claimableAmount"
                    value="<%= category.claimableAmount %>" step="1" placeholder=" ">
                <label for="claimableAmount">Claimable Amount</label>
                <span class="error-message" id="claimableAmount-error"></span>
            </div>

            <button type="submit" id="btn-submit" class="btn">Update Category</button>
        </form>
        <div class="note">* Ensure all fields are filled before submitting.</div>
    </div>

    <script>
        // Function to show error message
        function showError(inputId, message) {
            const input = document.getElementById(inputId);
            const errorElement = document.getElementById(inputId + '-error');
            input.parentElement.classList.add('error');
            errorElement.textContent = message;
        }

        // Function to clear error message
        function clearError(inputId) {
            const input = document.getElementById(inputId);
            const errorElement = document.getElementById(inputId + '-error');
            input.parentElement.classList.remove('error');
            errorElement.textContent = '';
        }

        // Function to validate single field
        function validateField(inputId, value) {
            clearError(inputId);

            if (!value.trim()) {
                showError(inputId, `This field is required`);
                return false;
            }

            switch (inputId) {
                case 'category-name':
                    if (!/^[A-Za-z ]+$/.test(value)) {
                        showError(inputId, 'Category name should only contain alphabets and spaces');
                        return false;
                    }
                    break;

                case 'category-description':
                    if (value.length < 10) {
                        showError(inputId, 'Description should be at least 10 characters');
                        return false;
                    }
                    if (value.length > 200) {
                        showError(inputId, 'Description should not exceed 200 characters');
                        return false;
                    }
                    break;

                case 'categoryOffer':
                    const offerValue = parseFloat(value);
                    if (isNaN(offerValue) || offerValue < 0 || offerValue > 99) {
                        showError(inputId, 'Offer must be between 0 and 99');
                        return false;
                    }
                    break;

                case 'minPrice':
                    if (isNaN(value) || parseFloat(value) < 0) {
                        showError(inputId, 'Minimum price must be a positive number');
                        return false;
                    }
                    break;

                case 'claimableAmount':
                    if (isNaN(value) || parseFloat(value) < 0) {
                        showError(inputId, 'Claimable amount must be a positive number');
                        return false;
                    }
                    const minPrice = parseFloat(document.getElementById('minPrice').value);
                    if (parseFloat(value) > minPrice) {
                        showError(inputId, 'Claimable amount cannot be greater than minimum price');
                        return false;
                    }
                    break;
            }

            return true;
        }

        // Add input event listeners for real-time validation
        document.getElementById('category-name').addEventListener('input', function () {
            validateField('category-name', this.value);
        });

        document.getElementById('category-description').addEventListener('input', function () {
            validateField('category-description', this.value);
        });

        document.getElementById('categoryOffer').addEventListener('input', function () {
            validateField('categoryOffer', this.value);
        });

        document.getElementById('minPrice').addEventListener('input', function () {
            validateField('minPrice', this.value);
            // Revalidate claimable amount when min price changes
            const claimableAmount = document.getElementById('claimableAmount');
            if (claimableAmount.value) {
                validateField('claimableAmount', claimableAmount.value);
            }
        });

        document.getElementById('claimableAmount').addEventListener('input', function () {
            validateField('claimableAmount', this.value);
        });

        async function handleSubmit(event) {
            event.preventDefault();

            const categoryName = document.getElementById('category-name').value.trim();
            const categoryDescription = document.getElementById('category-description').value.trim();
            const categoryOffer = document.getElementById('categoryOffer').value.trim();
            const minimumPrice = document.getElementById('minPrice').value.trim();
            const claimableAmount = document.getElementById('claimableAmount').value.trim();

            // Validate all fields
            const isNameValid = validateField('category-name', categoryName);
            const isDescriptionValid = validateField('category-description', categoryDescription);
            const isOfferValid = validateField('categoryOffer', categoryOffer);
            const isMinPriceValid = validateField('minPrice', minimumPrice);
            const isClaimableValid = validateField('claimableAmount', claimableAmount);

            // If any validation fails, stop form submission
            if (!isNameValid || !isDescriptionValid || !isOfferValid || !isMinPriceValid || !isClaimableValid) {
                return false;
            }

            await Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Category updated successfully',
                confirmButtonColor: '#007bff',
                timer: 2000,
                showConfirmButton: false
            });

            document.getElementById('add-category-form').submit();
            return true;
        }

        if (typeof errorMessage !== 'undefined' && errorMessage) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: errorMessage,
                confirmButtonColor: '#007bff'
            });
        }
    </script>
</body>

</html>